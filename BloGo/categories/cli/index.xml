<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cli on Go towards</title>
    <link>http://fxbrain.github.io/BloGo/categories/cli/</link>
    <description>Recent content in Cli on Go towards</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 09 Jun 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://fxbrain.github.io/BloGo/categories/cli/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Perfect Command Line Interface in Go</title>
      <link>http://fxbrain.github.io/BloGo/posts/newest/</link>
      <pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://fxbrain.github.io/BloGo/posts/newest/</guid>
      <description>

&lt;h2 id=&#34;introduction:912493bb798d2cf24137bef8b4adb6f6&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;There were times where a command line interface (CLI) seemed to be extinct, but due to
the emerge of tools like &lt;em&gt;Node.js&lt;/em&gt; and &lt;em&gt;Go&lt;/em&gt; the CLI got a revitalisation.&lt;/p&gt;

&lt;p&gt;A careful crafted CLI can be a powerful tool to an application.&lt;/p&gt;

&lt;p&gt;In this article I&amp;rsquo;d like to describe how I implemented a CLI library which
fulfilled my specific needs perfectly.&lt;/p&gt;

&lt;p&gt;While there are many options to choose, when in Node.js for a CLI I was not happy
with the current state of affair considering Go.&lt;/p&gt;

&lt;h2 id=&#34;architecture:912493bb798d2cf24137bef8b4adb6f6&#34;&gt;Architecture&lt;/h2&gt;

&lt;p&gt;Basically the idea was this. I wanted to develop a container where commands can register
itself to get listed with their specific description and can be executed.&lt;/p&gt;

&lt;p&gt;These commands I&amp;rsquo;ll call for now a &lt;em&gt;subcommand&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Every subcommand must fulfill the following interface:
1. Initialisation during init() with &lt;em&gt;RegisterCommand&lt;/em&gt;
2. A &lt;em&gt;Usage&lt;/em&gt; function
3. A &lt;em&gt;RunCommand&lt;/em&gt; function
4. In order to get listed as a subcommand it must provide a &lt;em&gt;Description&lt;/em&gt; function
5. If the subcommand want to display several examples of its usage it must provide a
&lt;em&gt;Examples&lt;/em&gt; function&lt;/p&gt;

&lt;h2 id=&#34;the-container:912493bb798d2cf24137bef8b4adb6f6&#34;&gt;The Container&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package cmdmain

var (
	FlagVersion = flag.Bool(&amp;quot;version&amp;quot;, false, &amp;quot;show version&amp;quot;)
	FlagHelp    = flag.Bool(&amp;quot;help&amp;quot;, false, &amp;quot;print usage&amp;quot;)
	FlagVerbose = flag.Bool(&amp;quot;verbose&amp;quot;, false, &amp;quot;extra debug logging&amp;quot;)
)

var (
	ExtraFlagRegistration = func() {}
	PreExit = func() {}
	ExitWithFailure bool
	CheckCwd = func() {}
	CheckModtime = func() error { return nil }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var (
	modeCommand = make(map[string]CommandRunner)
	modeFlags   = make(map[string]*flag.FlagSet)
	wantHelp    = make(map[string]*bool)

	Stderr io.Writer = os.Stderr
	Stdout io.Writer = os.Stdout
	Stdin  io.Reader = os.Stdin

	Exit = realExit

)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type CommandRunner interface {
	Usage()
	RunCommand(args []string) error


type exampler interface {
	Examples() []string
}
type describer interface {
	Describe() string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func RegisterCommand(mode string, makeCmd func(Flags *flag.FlagSet)
                     CommandRunner) {
	if _, dup := modeCommand[mode]; dup {
		log.Fatalf(&amp;quot;duplicate command %q registered&amp;quot;, mode)
	}
	flags := flag.NewFlagSet(mode+&amp;quot; options&amp;quot;, flag.ContinueOnError)
	flags.Usage = func() {}

	var cmdHelp bool
	flags.BoolVar(&amp;amp;cmdHelp, &amp;quot;help&amp;quot;, false, &amp;quot;Help for this mode.&amp;quot;)
	wantHelp[mode] = &amp;amp;cmdHelp
	modeFlags[mode] = flags
	modeCommand[mode] = makeCmd(flags)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;a-subcommand:912493bb798d2cf24137bef8b4adb6f6&#34;&gt;A Subcommand&lt;/h2&gt;

&lt;p&gt;The following subcommand implementation is in its functionality very similar
to the Node.js &lt;em&gt;http-server&lt;/em&gt; module. It serves static files through http.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type serveCmd struct {
	address string
	port    string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func init() {
	cmdmain.RegisterCommand(&amp;quot;serve&amp;quot;, func(flags *flag.FlagSet) cmdmain.CommandRunner {
		cmd := new(serveCmd)
		flags.StringVar(&amp;amp;cmd.address, &amp;quot;address&amp;quot;, &amp;quot;localhost&amp;quot;, &amp;quot;host address.&amp;quot;)
		flags.StringVar(&amp;amp;cmd.port, &amp;quot;port&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;host port.&amp;quot;)
		return cmd
	})
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (c *serveCmd) Describe() string {
	return &amp;quot;Run a http server from address:port&amp;quot;
}

func (c *serveCmd) Usage() {
	fmt.Fprintf(os.Stderr, &amp;quot;Usage: cmdtool [globalopts] serve [--host] [--port]\n&amp;quot;)
}

func (c *serveCmd) Examples() []string {
	return nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (c *serveCmd) RunCommand(args []string) error {
	if c.port == &amp;quot;&amp;quot; {
		return cmdmain.UsageError(&amp;quot;--port flag is required.&amp;quot;)
	}
	fmt.Println(chalk.Yellow, &amp;quot;Starting up http-server, serving &amp;quot;, chalk.Reset,
		chalk.Cyan, &amp;quot;./&amp;quot;, chalk.Reset, chalk.Yellow, &amp;quot; on &amp;quot;, chalk.Reset, chalk.Cyan,
		&amp;quot;http://0.0.0.0:&amp;quot;+c.port, chalk.Reset)
	http.Handle(&amp;quot;/&amp;quot;, http.FileServer(http.Dir(&amp;quot;.&amp;quot;)))
	http.ListenAndServe(c.address+&amp;quot;:&amp;quot;+c.port, nil)
	return nil
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>