<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stop making foo</title>
    <atom:link href="http://localhost:8080/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://localhost:8080</link>
    <description>On such and such...</description>
    <pubDate>Fri, 10 Apr 2015 02:00:00 +0200</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Javascript Signed Integer Conversions</title>
      <link>http://localhost:8080/articles/JavaScript%20Signed%20Integer%20conversion/</link>
      <pubDate>Fri, 10 Apr 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/JavaScript%20Signed%20Integer%20conversion/</guid>
      <author></author>
      <description>&lt;p&gt;Many folksd are confused on how asm.js is using specific operators to force values to become signed integers. This article tries to shed a light upon this affair.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We can dig into SpiderMonkey using gdb to realise the type conversion life:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gdb --args js
[...]
(gdb) b JS::ToInt32
(gdb) r

js&amp;gt; var i = 123.3;
js&amp;gt; i|3

Breakpoint 2, JS::ToInt32 (cx=0x7ffff6b67180, v=$jsval(123.3), out=0x7fffffffda60)
at ../../../dist/include/js/Conversions.h:149
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So we proofed that the ‘|’ operator does type coercion into signed integer.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Problem solving using q</title>
      <link>http://localhost:8080/articles/Functional%20Q/</link>
      <pubDate>Sat, 04 Apr 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/Functional%20Q/</guid>
      <author></author>
      <description>&lt;h3 id=&quot;euler-problem-1&quot;&gt;Euler Problem #1&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;If we list all the natural numbers below 10 that are
multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these
multiples is 23.&lt;/p&gt;
&lt;p&gt;Find the sum of all the multiples of 3 or 5 below 1000.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s create an array 9-1000 using &lt;em&gt;til&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;    a: til &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;

    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;28&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we calculate the modulus 5 of each array element&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;    a mod &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;

    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(We could’ve used a &lt;em&gt;lambda&lt;/em&gt; here, but luckily &lt;em&gt;q&lt;/em&gt; operates on lists and does
automatically vectorize over a)&lt;/p&gt;
&lt;p&gt;Now we need to find all the array elements with remainder 0&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; = a mod &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;

    &lt;span class=&quot;number&quot;&gt;10000100001000010000100001000010000100001000010000100001000010000100001000010.&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re doing the same with modulus 3&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; = a mod &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;

    &lt;span class=&quot;number&quot;&gt;10010010010010010010010010010010010010010010010010010010010010010010010010010.&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s combine both operations using &lt;em&gt;or&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;    (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;=a mod &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) or (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;=a mod &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)

    &lt;span class=&quot;number&quot;&gt;10010110011010010010110011010010010110011010010010110011010010010110011010010.&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to multiply the resulting array with an array 0-999, where
all elements with value 1 are divisible by 3 or 5 with remainder zero.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;    a * (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;=a mod &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) or (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;=a mod &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)

    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the last step we just need to sum up all the resulting elements&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;    sum a * (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;=a mod &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) or (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;=a mod &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)

    &lt;span class=&quot;number&quot;&gt;233168&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, the solution to Euler-Problem #1 is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;    p01: sum (til &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;) * ({&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; = x mod &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;} til &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;) or ({&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; = x mod &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;} til &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)

    p01

    &lt;span class=&quot;number&quot;&gt;233168&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But wait! &lt;em&gt;q&lt;/em&gt; wouldn’t be &lt;em&gt;q&lt;/em&gt; and if there wouldn’t be a much terser solution to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;    p01: sum {x where any each &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; = x mod \: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;} til &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;

    p01

    &lt;span class=&quot;number&quot;&gt;233168&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>README</title>
      <link>http://localhost:8080/articles/hello-world/</link>
      <pubDate>Wed, 01 Apr 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/hello-world/</guid>
      <author></author>
      <description>&lt;p&gt;This is my blog. There are many like it, but this one is mine. My blog is my best friend. It is my life. I must master it as I must master my life. My blog, without me, is useless. Without my blog, I am useless.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>