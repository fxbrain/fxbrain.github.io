<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stop making foo</title>
    <atom:link href="http://localhost:8080/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://localhost:8080</link>
    <description>On such and such...</description>
    <pubDate>Tue, 07 Jul 2015 02:00:00 +0200</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>The Stack Question - DevOps</title>
      <link>http://localhost:8080/articles/The%20Stack%20Question/</link>
      <pubDate>Tue, 07 Jul 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/The%20Stack%20Question/</guid>
      <author></author>
      <description>&lt;p&gt;It is confusing how often it happens that I ask customers about their stack in
use and how often they barely can answer this simple question.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;why-would-i-ask-this-&quot;&gt;Why would I ask this?&lt;/h3&gt;
&lt;p&gt;Simply and primarily because I am really interested. Furthermore it is quite a
social interaction on a developer niveau. It helps me, make
decisions about technology I choose in production.&lt;/p&gt;
&lt;p&gt;When I am asking this question I am interested in these points:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What is working for them.&lt;/li&gt;
&lt;li&gt;What is it they like using.&lt;/li&gt;
&lt;li&gt;What is it that completely falls over and they hate and why.&lt;/li&gt;
&lt;li&gt;What is their workflow.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As a freelancer, being in an interview, I think these are &lt;strong&gt;THE&lt;/strong&gt; most
important questions you can/must ask. If properly answered they’ll give you
deep insights on not only how they’re doing things, but what the reasons are
for them to contact you.&lt;/p&gt;
&lt;p&gt;If they’re unable to answer this cogently, well, then the project is
already in a completely flawed condition and you should maybe just … run?&lt;/p&gt;
&lt;p&gt;Well, if they want you as a developer.&lt;/p&gt;
&lt;p&gt;If they can’t really answer and want to you to fix this? &lt;strong&gt;Perfect!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Code is and will always be a &lt;strong&gt;disposable product&lt;/strong&gt;. There is only a minor
amount in every code-base I know, which is fixed and not due to change/die.
There are enough developers out there producing code. Of course that does
not mean the code created is necessarily good. But this is not my point.&lt;/p&gt;
&lt;p&gt;For any problem there will be some code approximating some solution over
the time.&lt;/p&gt;
&lt;p&gt;The older I get the more a lazy programmer I become. I am more and more
heading towards a mental state where I think that the best code is probably
that one that I haven’t written or to put it differently. The less lines
of code I write, the more stable the system is.&lt;/p&gt;
&lt;p&gt;My interest has changed over the years. Today I find myself truly happy
using git, a bunch of compilers, strace, perftool, npm etc. Finding the
weird and puzzling bug in a distributed system is what makes me tick.&lt;/p&gt;
&lt;p&gt;But for all this you have to be very profound in using tools and get a
feeling for the right tool for the job.&lt;/p&gt;
&lt;p&gt;What I’ve encountered through all these years freelancing in projects,
that the proper choice of a stack is one of the biggest issues to solve.&lt;/p&gt;
&lt;p&gt;But, a proper stack is not resulting necessarily in a proper workflow.
The latter is where the art is.&lt;/p&gt;
&lt;p&gt;Fairly often I come into companies with some decent choice of a stack
and a completely messed up workflow.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A STACK DOES NOT INDUCE WORKFLOW!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A decent choice of a stack is an experience matter, establishing a likewise
decent workflow is more approximative by nature.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The Perfect Command Line Interface in Go</title>
      <link>http://localhost:8080/articles/The%20Perfect%20CLI/</link>
      <pubDate>Tue, 09 Jun 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/The%20Perfect%20CLI/</guid>
      <author></author>
      <description>&lt;p&gt;There were times where a command line interface (CLI) seemed to be extinct, but due to
the emerge of tools like &lt;em&gt;Node.js&lt;/em&gt; and &lt;em&gt;Go&lt;/em&gt; the CLI got a revitalisation.&lt;/p&gt;
&lt;h2 id=&quot;a-careful-crafted-cli-can-be-a-powerful-tool-to-an-application-&quot;&gt;A careful crafted CLI can be a powerful tool to an application.&lt;/h2&gt;
&lt;p&gt;What is interesting that we did these things in Perl aeons ago already and still do.
At these times, when you presented yor carefully crafted CLI the result very often
were a frown. This is Perl. You cannot write big applications with it.&lt;/p&gt;
&lt;p&gt;Christ sake. Who wanted this ever in the first place? Every capable Perl hacker knew
how to divide a complex task into smaller one and use a CLI to mesh these functionalities
together.&lt;/p&gt;
&lt;p&gt;Nowadays this is called &lt;strong&gt;micro-service architecture&lt;/strong&gt;. What a bummer. But this here
is not the right place for a rant against all this and with what terrible blindness people
just follow the latest hey that essentially does the same thing, but claiming
simplification the real deal.&lt;/p&gt;
&lt;p&gt;In this article I’d like to describe how I implemented a CLI library which
fulfilled my specific needs perfectly&lt;/p&gt;
&lt;h2 id=&quot;1-intro&quot;&gt;1. Intro&lt;/h2&gt;
&lt;p&gt;While there are many options to choose, when in Node.js for a CLI I was not happy
with the current state of affair considering Go.&lt;/p&gt;
&lt;h2 id=&quot;2-architecture&quot;&gt;2. Architecture&lt;/h2&gt;
&lt;p&gt;Basically the idea was this. I wanted to develop a container where commands can register
itself to get listed with their specific description and be executed.&lt;/p&gt;
&lt;p&gt;These commands I’ll call for now a &lt;em&gt;subcommand&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Every subcommand must fulfill the following interface:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Initialisation during init() with &lt;em&gt;RegisterCommand&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;Usage&lt;/em&gt; function&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;RunCommand&lt;/em&gt; function&lt;/li&gt;
&lt;li&gt;In order to get listed as a subcommand it must provide a &lt;em&gt;Description&lt;/em&gt; function&lt;/li&gt;
&lt;li&gt;If the subcommand want to display several examples of its usage it must provide a
&lt;em&gt;Examples&lt;/em&gt; function&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;3-the-container&quot;&gt;3. The Container&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; cmdmain

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; (
    FlagVersion = flag.Bool(&lt;span class=&quot;string&quot;&gt;&quot;version&quot;&lt;/span&gt;, &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;show version&quot;&lt;/span&gt;)
    FlagHelp    = flag.Bool(&lt;span class=&quot;string&quot;&gt;&quot;help&quot;&lt;/span&gt;, &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;print usage&quot;&lt;/span&gt;)
    FlagVerbose = flag.Bool(&lt;span class=&quot;string&quot;&gt;&quot;verbose&quot;&lt;/span&gt;, &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;extra debug logging&quot;&lt;/span&gt;)
)

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; (
    ExtraFlagRegistration = &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;() {}
    PreExit = &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;() {}
    ExitWithFailure &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;
    CheckCwd = &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;() {}
    CheckModtime = &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;() error { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; (
    modeCommand = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;]CommandRunner)
    modeFlags   = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;]*flag.FlagSet)
    wantHelp    = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;]*&lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;)

    Stderr io.Writer = os.Stderr
    Stdout io.Writer = os.Stdout
    Stdin  io.Reader = os.Stdin

    Exit = realExit

)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; CommandRunner &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; {
    Usage()
    RunCommand(args []&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;) error


&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; exampler &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; {
    Examples() []&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;
}
&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; describer &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; {
    Describe() &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; RegisterCommand(mode &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;, makeCmd &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;(Flags *flag.FlagSet)
                     CommandRunner) {
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _, dup := modeCommand[mode]; dup {
        log.Fatalf(&lt;span class=&quot;string&quot;&gt;&quot;duplicate command %q registered&quot;&lt;/span&gt;, mode)
    }
    flags := flag.NewFlagSet(mode+&lt;span class=&quot;string&quot;&gt;&quot; options&quot;&lt;/span&gt;, flag.ContinueOnError)
    flags.Usage = &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;() {}

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cmdHelp &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;
    flags.BoolVar(&amp;amp;cmdHelp, &lt;span class=&quot;string&quot;&gt;&quot;help&quot;&lt;/span&gt;, &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Help for this mode.&quot;&lt;/span&gt;)
    wantHelp[mode] = &amp;amp;cmdHelp
    modeFlags[mode] = flags
    modeCommand[mode] = makeCmd(flags)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;4-a-subcommand&quot;&gt;4. A Subcommand&lt;/h2&gt;
&lt;p&gt;The following subcommand implementation is in its functionality very similar
to the Node.js &lt;em&gt;http-server&lt;/em&gt; module. It serves static files through http.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; serveCmd &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; {
    address &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;
    port    &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; init() {
    cmdmain.RegisterCommand(&lt;span class=&quot;string&quot;&gt;&quot;serve&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;(flags *flag.FlagSet) cmdmain.CommandRunner {
        cmd := &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(serveCmd)
        flags.StringVar(&amp;amp;cmd.address, &lt;span class=&quot;string&quot;&gt;&quot;address&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;host address.&quot;&lt;/span&gt;)
        flags.StringVar(&amp;amp;cmd.port, &lt;span class=&quot;string&quot;&gt;&quot;port&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;host port.&quot;&lt;/span&gt;)
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cmd
    })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (c *serveCmd) Describe() &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt; {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Run a http server from address:port&quot;&lt;/span&gt;
}

&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (c *serveCmd) Usage() {
    fmt.Fprintf(os.Stderr, &lt;span class=&quot;string&quot;&gt;&quot;Usage: cmdtool [globalopts] serve [--host] [--port]\n&quot;&lt;/span&gt;)
}

&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (c *serveCmd) Examples() []&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt; {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (c *serveCmd) RunCommand(args []&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;) error {
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; c.port == &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cmdmain.UsageError(&lt;span class=&quot;string&quot;&gt;&quot;--port flag is required.&quot;&lt;/span&gt;)
    }
    fmt.Println(chalk.Yellow, &lt;span class=&quot;string&quot;&gt;&quot;Starting up http-server, serving &quot;&lt;/span&gt;, chalk.Reset,
        chalk.Cyan, &lt;span class=&quot;string&quot;&gt;&quot;./&quot;&lt;/span&gt;, chalk.Reset, chalk.Yellow, &lt;span class=&quot;string&quot;&gt;&quot; on &quot;&lt;/span&gt;, chalk.Reset, chalk.Cyan,
        &lt;span class=&quot;string&quot;&gt;&quot;http://0.0.0.0:&quot;&lt;/span&gt;+c.port, chalk.Reset)
    http.Handle(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, http.FileServer(http.Dir(&lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;)))
    http.ListenAndServe(c.address+&lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;+c.port, &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;)
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;5-execution&quot;&gt;5. Execution&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/articles/The%20Perfect%20CLI/images/image1.png&quot; alt=&quot;cmdtool&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/The%20Perfect%20CLI/images/image2.png&quot; alt=&quot;cmdtool&quot;&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Javascript Signed Integer Conversions</title>
      <link>http://localhost:8080/articles/JavaScript%20Signed%20Integer%20conversion/</link>
      <pubDate>Fri, 10 Apr 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/JavaScript%20Signed%20Integer%20conversion/</guid>
      <author></author>
      <description>&lt;p&gt;Many folksd are confused on how asm.js is using specific operators to force values to become signed integers. This article tries to shed a light upon this affair.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We can dig into SpiderMonkey using gdb to realise the type conversion life:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gdb --args js
[...]
(gdb) b JS::ToInt32
(gdb) r

js&amp;gt; var i = 123.3;
js&amp;gt; i|3

Breakpoint 2, JS::ToInt32 (cx=0x7ffff6b67180, v=$jsval(123.3), out=0x7fffffffda60)
at ../../../dist/include/js/Conversions.h:149
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So we proofed that the ‘|’ operator does type coercion into signed integer.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Problem solving using q</title>
      <link>http://localhost:8080/articles/Functional%20Q/</link>
      <pubDate>Sat, 04 Apr 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/Functional%20Q/</guid>
      <author></author>
      <description>&lt;h3 id=&quot;euler-problem-1&quot;&gt;Euler Problem #1&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;If we list all the natural numbers below 10 that are
multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these
multiples is 23.&lt;/p&gt;
&lt;h2 id=&quot;find-the-sum-of-all-the-multiples-of-3-or-5-below-1000-&quot;&gt;Find the sum of all the multiples of 3 or 5 below 1000.&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s create an array 9-1000 using &lt;em&gt;til&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;    a: til &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;

    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;28&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we calculate the modulus 5 of each array element&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;    a mod &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;

    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(We could’ve used a &lt;em&gt;lambda&lt;/em&gt; here, but luckily &lt;em&gt;q&lt;/em&gt; operates on lists and does
automatically vectorize over a)&lt;/p&gt;
&lt;p&gt;Now we need to find all the array elements with remainder 0&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; = a mod &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;

    &lt;span class=&quot;number&quot;&gt;10000100001000010000100001000010000100001000010000100001000010000100001000010.&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re doing the same with modulus 3&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; = a mod &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;

    &lt;span class=&quot;number&quot;&gt;10010010010010010010010010010010010010010010010010010010010010010010010010010.&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s combine both operations using &lt;em&gt;or&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;    (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;=a mod &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) or (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;=a mod &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)

    &lt;span class=&quot;number&quot;&gt;10010110011010010010110011010010010110011010010010110011010010010110011010010.&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to multiply the resulting array with an array 0-999, where
all elements with value 1 are divisible by 3 or 5 with remainder zero.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;    a * (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;=a mod &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) or (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;=a mod &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)

    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the last step we just need to sum up all the resulting elements&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;    sum a * (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;=a mod &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) or (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;=a mod &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)

    &lt;span class=&quot;number&quot;&gt;233168&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, the solution to Euler-Problem #1 is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;    p01: sum (til &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;) * ({&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; = x mod &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;} til &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;) or ({&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; = x mod &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;} til &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)

    p01

    &lt;span class=&quot;number&quot;&gt;233168&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But wait! &lt;em&gt;q&lt;/em&gt; wouldn’t be &lt;em&gt;q&lt;/em&gt; and if there wouldn’t be a much terser solution to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-go&quot;&gt;    p01: sum {x where any each &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; = x mod \: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;} til &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;

    p01

    &lt;span class=&quot;number&quot;&gt;233168&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>README</title>
      <link>http://localhost:8080/articles/hello-world/</link>
      <pubDate>Wed, 01 Apr 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/hello-world/</guid>
      <author></author>
      <description>&lt;p&gt;This is my blog. There are many like it, but this one is mine. My blog is my best friend. It is my life. I must master it as I must master my life. My blog, without me, is useless. Without my blog, I am useless.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>